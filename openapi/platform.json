{
  "info": {
    "title": "Pixelbin APIs",
    "version": "1.4.1",
    "description": "Pixelbin APIs"
  },
  "openapi": "3.0.2",
  "paths": {
    "/service/platform/assets/v1.0/upload/direct": {
      "post": {
        "summary": "fileUpload | Upload File",
        "description": "Upload File to Pixelbin",
        "tags": ["Assets"],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/FileUploadRequest"
              },
              "example": {
                "file": "fileReadStream",
                "path": "path/to/containing/folder",
                "name": "filename",
                "access": "public-read",
                "tags": ["tag1", "tag2"],
                "metadata": {},
                "overwrite": false,
                "filenameOverride": true
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadResponse"
                },
                "example": {
                  "_id": "dummy-uuid",
                  "name": "asset",
                  "path": "dir",
                  "fileId": "dir/asset",
                  "format": "jpeg",
                  "size": 1000,
                  "access": "private",
                  "isActive": true,
                  "tags": ["tag1", "tag2"],
                  "metadata": {
                    "key": "value"
                  },
                  "url": "https://domain.com/filename.jpeg"
                }
              }
            }
          }
        }
      }
    },
    "/service/platform/assets/v1.0/upload/url": {
      "post": {
        "summary": "urlUpload | Upload Asset with url",
        "description": "Upload Asset with url",
        "tags": ["Assets"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UrlUploadRequest"
              },
              "example": {
                "url": "www.dummy.com/image.png",
                "path": "path/to/containing/folder",
                "name": "filename",
                "access": "public-read",
                "tags": ["tag1", "tag2"],
                "metadata": {},
                "overwrite": false,
                "filenameOverride": true
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadResponse"
                },
                "example": {
                  "_id": "dummy-uuid",
                  "name": "asset",
                  "path": "dir",
                  "fileId": "dir/asset",
                  "format": "jpeg",
                  "size": 1000,
                  "access": "private",
                  "isActive": true,
                  "tags": ["tag1", "tag2"],
                  "metadata": {
                    "key": "value"
                  },
                  "url": "https://domain.com/filename.jpeg"
                }
              }
            }
          }
        }
      }
    },
    "/service/platform/assets/v1.0/upload/signed-url": {
      "post": {
        "summary": "createSignedUrl | S3 Signed URL upload",
        "description": "For the given asset details, a S3 signed URL will be generated,\nwhich can be then used to upload your asset.\n",
        "tags": ["Assets"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignedUploadRequest"
              },
              "example": {
                "path": "path/to/containing/folder",
                "name": "filename",
                "format": "jpeg",
                "access": "public-read",
                "tags": ["tag1", "tag2"],
                "metadata": {},
                "overwrite": false,
                "filenameOverride": true
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SignedUploadResponse"
                },
                "example": {
                  "s3PresignedUrl": {
                    "url": "https://domain.com/xyz",
                    "fields": {
                      "field1": "value",
                      "field2": "value"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/service/platform/assets/v1.0/listFiles": {
      "get": {
        "summary": "listFiles | List and search files and folders.",
        "description": "List all files and folders in root folder. Search for files if name is provided. If path is provided, search in the specified path.\n",
        "tags": ["Assets"],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": false,
            "description": "Find items with matching name",
            "schema": {
              "type": "string"
            },
            "example": "cat"
          },
          {
            "name": "path",
            "in": "query",
            "required": false,
            "description": "Find items with matching path",
            "schema": {
              "type": "string"
            },
            "example": "cat-photos"
          },
          {
            "name": "format",
            "in": "query",
            "required": false,
            "description": "Find items with matching format",
            "schema": {
              "type": "string"
            },
            "example": "jpeg"
          },
          {
            "name": "tags",
            "in": "query",
            "required": false,
            "description": "Find items containing these tags",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "example": ["cats", "animals"]
          },
          {
            "name": "onlyFiles",
            "in": "query",
            "required": false,
            "description": "If true will fetch only files",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "example": false
          },
          {
            "name": "onlyFolders",
            "in": "query",
            "required": false,
            "description": "If true will fetch only folders",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "example": false
          },
          {
            "name": "pageNo",
            "in": "query",
            "required": false,
            "description": "Page No.",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            "example": 1
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "description": "Page Size",
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 1,
              "maximum": 100
            },
            "example": 10
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "description": "Key to sort results by. A \"-\" suffix will sort results in descending orders.\n",
            "schema": {
              "type": "string"
            },
            "example": "name"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListFilesResponse"
                },
                "example": {
                  "items": [
                    {
                      "_id": "dummy-uuid",
                      "name": "dir",
                      "type": "folder"
                    },
                    {
                      "_id": "dummy-uuid",
                      "name": "asset2",
                      "type": "file",
                      "path": "dir",
                      "fileId": "dir/asset2",
                      "format": "jpeg",
                      "size": 1000,
                      "access": "private"
                    },
                    {
                      "_id": "dummy-uuid",
                      "name": "asset1",
                      "type": "file",
                      "path": "dir",
                      "fileId": "dir/asset1",
                      "format": "jpeg",
                      "size": 1000,
                      "access": "private"
                    }
                  ],
                  "page": {
                    "type": "number",
                    "size": 4,
                    "current": 1,
                    "hasNext": false
                  }
                }
              }
            }
          }
        }
      }
    },
    "/service/platform/assets/v1.0/files/id/{_id}": {
      "get": {
        "summary": "getFileById | Get file details with _id",
        "tags": ["Assets"],
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true,
            "description": "_id of File",
            "schema": {
              "type": "string"
            },
            "example": "c9138153-94ea-4dbe-bea9-65d43dba85ae"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilesResponse"
                },
                "example": {
                  "_id": "dummy-uuid",
                  "name": "asset",
                  "path": "dir",
                  "fileId": "dir/asset",
                  "format": "jpeg",
                  "size": 1000,
                  "access": "private",
                  "isActive": true,
                  "tags": ["tag1", "tag2"],
                  "metadata": {
                    "key": "value"
                  },
                  "url": "https://domain.com/filename.jpeg"
                }
              }
            }
          }
        }
      }
    },
    "/service/platform/assets/v1.0/files/{fileId}": {
      "get": {
        "summary": "getFileByFileId | Get file details with fileId",
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "required": true,
            "description": "Combination of `path` and `name` of file",
            "schema": {
              "type": "string"
            },
            "example": "path/to/file/name"
          }
        ],
        "tags": ["Assets"],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilesResponse"
                },
                "example": {
                  "_id": "dummy-uuid",
                  "name": "asset",
                  "path": "dir",
                  "fileId": "dir/asset",
                  "format": "jpeg",
                  "size": 1000,
                  "access": "private",
                  "isActive": true,
                  "tags": ["tag1", "tag2"],
                  "metadata": {
                    "key": "value"
                  },
                  "url": "https://domain.com/filename.jpeg"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "updateFile | Update file details",
        "tags": ["Assets"],
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "required": true,
            "description": "Combination of `path` and `name`",
            "schema": {
              "type": "string"
            },
            "example": "path/to/file/name"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateFileRequest"
              },
              "example": {
                "name": "asset",
                "path": "dir",
                "access": "private",
                "isActive": false,
                "tags": ["tag1", "tag2"],
                "metadata": {
                  "key": "value"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilesResponse"
                },
                "example": {
                  "_id": "dummy-uuid",
                  "name": "asset",
                  "path": "dir",
                  "fileId": "dir/asset",
                  "format": "jpeg",
                  "size": 1000,
                  "access": "private",
                  "isActive": true,
                  "tags": ["tag1", "tag2"],
                  "metadata": {
                    "key": "value"
                  },
                  "url": "https://domain.com/filename.jpeg"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "deleteFile | Delete file",
        "tags": ["Assets"],
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "required": true,
            "description": "Combination of `path` and `name`",
            "schema": {
              "type": "string"
            },
            "example": "path/to/file/name"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilesResponse"
                },
                "example": {
                  "_id": "dummy-uuid",
                  "name": "asset",
                  "path": "dir",
                  "fileId": "dir/asset",
                  "format": "jpeg",
                  "size": 1000,
                  "access": "private",
                  "isActive": true,
                  "tags": ["tag1", "tag2"],
                  "metadata": {
                    "key": "value"
                  },
                  "url": "https://domain.com/filename.jpeg"
                }
              }
            }
          }
        }
      }
    },
    "/service/platform/assets/v1.0/files/delete": {
      "post": {
        "summary": "deleteFiles | Delete multiple files",
        "tags": ["Assets"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteMultipleFilesRequest"
              },
              "example": {
                "ids": ["_id_1", "_id_2", "_id_3"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FilesResponse"
                  }
                },
                "example": [
                  {
                    "_id": "dummy-uuid",
                    "name": "asset",
                    "path": "dir",
                    "fileId": "dir/asset",
                    "format": "jpeg",
                    "size": 1000,
                    "access": "private",
                    "isActive": true,
                    "tags": ["tag1", "tag2"],
                    "metadata": {
                      "key": "value"
                    },
                    "url": "https://domain.com/filename.jpeg"
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/service/platform/assets/v1.0/folders": {
      "post": {
        "summary": "createFolder | Create folder",
        "description": "Create a new folder at the specified path. Also creates the ancestors if they do not exist.\n",
        "tags": ["Assets"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFolderRequest"
              },
              "example": {
                "name": "subDir",
                "path": "dir"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success - List of all created folders",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FoldersResponse"
                },
                "example": {
                  "_id": "dummy-uuid",
                  "name": "subDir",
                  "path": "dir",
                  "isActive": true
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "getFolderDetails | Get folder details",
        "description": "Get folder details\n",
        "tags": ["Assets"],
        "parameters": [
          {
            "name": "path",
            "in": "query",
            "required": false,
            "description": "Folder path",
            "schema": {
              "type": "string"
            },
            "example": "dir1/dir2"
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "description": "Folder name",
            "schema": {
              "type": "string"
            },
            "example": "dir"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/exploreItem"
                },
                "example": {
                  "$ref": "#/components/examples/ExploreItemExample"
                }
              }
            }
          }
        }
      }
    },
    "/service/platform/assets/v1.0/folders/{folderId}": {
      "patch": {
        "summary": "updateFolder | Update folder details",
        "description": "Update folder details. Eg: Soft delete it\nby making `isActive` as `false`.\nWe currently do not support updating folder name or path.\n",
        "ignore": true,
        "parameters": [
          {
            "name": "folderId",
            "in": "path",
            "required": true,
            "description": "combination of `path` and `name`",
            "schema": {
              "type": "string"
            },
            "example": "path/to/folder/name"
          }
        ],
        "tags": ["Assets"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateFolderRequest"
              },
              "example": {
                "isActive": false
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FoldersResponse"
                },
                "example": {
                  "_id": "dummy-uuid",
                  "name": "subDir",
                  "path": "dir",
                  "isActive": true
                }
              }
            }
          }
        }
      }
    },
    "/service/platform/assets/v1.0/folders/{_id}": {
      "delete": {
        "summary": "deleteFolder | Delete folder",
        "description": "Delete folder and all its children permanently.\n",
        "tags": ["Assets"],
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true,
            "description": "_id of folder to be deleted",
            "schema": {
              "type": "string"
            },
            "example": "c9138153-94ea-4dbe-bea9-65d43dba85ae"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FoldersResponse"
                },
                "example": {
                  "_id": "dummy-uuid",
                  "name": "subDir",
                  "path": "dir",
                  "isActive": true
                }
              }
            }
          }
        }
      }
    },
    "/service/platform/assets/v1.0/folders/{_id}/ancestors": {
      "get": {
        "summary": "getFolderAncestors | Get all ancestors of a folder",
        "description": "Get all ancestors of a folder, using the folder ID.\n",
        "tags": ["Assets"],
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true,
            "description": "_id of the folder",
            "schema": {
              "type": "string"
            },
            "example": "c9138153-94ea-4dbe-bea9-65d43dba85ae"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAncestorsResponse"
                },
                "example": {
                  "folder": {
                    "_id": "dummy-uuid",
                    "name": "subDir",
                    "path": "dir1/dir2",
                    "isActive": true
                  },
                  "ancestors": [
                    {
                      "_id": "dummy-uuid-2",
                      "name": "dir1",
                      "path": "",
                      "isActive": true
                    },
                    {
                      "_id": "dummy-uuid-2",
                      "name": "dir2",
                      "path": "dir1",
                      "isActive": true
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/service/platform/assets/v1.0/credentials": {
      "post": {
        "summary": "addCredentials | Add credentials for a transformation module.",
        "description": "Add a transformation modules's credentials for an organization.\n",
        "tags": ["Assets"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddCredentialsRequest"
              },
              "example": {
                "pluginId": "awsRek",
                "credentials": {
                  "region": "ap-south-1",
                  "accessKeyId": "123456789ABC",
                  "secretAccessKey": "DUMMY1234567890"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddCredentialsResponse"
                },
                "example": {
                  "_id": "123ee789-7ae8-4336-b9bd-e4f33c049002",
                  "createdAt": "2022-10-04T09:52:09.545Z",
                  "updatedAt": "2022-10-04T09:52:09.545Z",
                  "orgId": 23,
                  "pluginId": "awsRek"
                }
              }
            }
          }
        }
      }
    },
    "/service/platform/assets/v1.0/credentials/{pluginId}": {
      "patch": {
        "summary": "updateCredentials | Update credentials of a transformation module.",
        "description": "Update credentials of a transformation module, for an organization.\n",
        "tags": ["Assets"],
        "parameters": [
          {
            "name": "pluginId",
            "in": "path",
            "required": true,
            "description": "ID of the plugin whose credentials are being updated",
            "schema": {
              "type": "string"
            },
            "example": "awsRek"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCredentialsRequest"
              },
              "example": {
                "pluginId": "awsRek",
                "credentials": {
                  "region": "ap-south-1",
                  "accessKeyId": "123456789ABC",
                  "secretAccessKey": "DUMMY1234567890"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddCredentialsResponse"
                },
                "example": {
                  "_id": "123ee789-7ae8-4336-b9bd-e4f33c049002",
                  "createdAt": "2022-10-04T09:52:09.545Z",
                  "updatedAt": "2022-10-04T09:52:09.545Z",
                  "orgId": 23,
                  "pluginId": "awsRek"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "deleteCredentials | Delete credentials of a transformation module.",
        "description": "Delete credentials of a transformation module, for an organization.\n",
        "tags": ["Assets"],
        "parameters": [
          {
            "name": "pluginId",
            "in": "path",
            "required": true,
            "description": "ID of the plugin whose credentials are being deleted",
            "schema": {
              "type": "string"
            },
            "example": "awsRek"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddCredentialsResponse"
                },
                "example": {
                  "_id": "123ee789-7ae8-4336-b9bd-e4f33c049002",
                  "createdAt": "2022-10-04T09:52:09.545Z",
                  "updatedAt": "2022-10-04T09:52:09.545Z",
                  "orgId": 23,
                  "pluginId": "awsRek"
                }
              }
            }
          }
        }
      }
    },
    "/service/platform/assets/v1.0/presets": {
      "post": {
        "summary": "addPreset | Add a preset.",
        "description": "Add a preset for an organization.\n",
        "tags": ["Assets"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddPresetRequest"
              },
              "example": {
                "presetName": "p1",
                "transformation": "t.flip()~t.flop()",
                "params": {
                  "w": {
                    "type": "integer",
                    "default": 200
                  },
                  "h": {
                    "type": "integer",
                    "default": 400
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddPresetResponse"
                },
                "example": {
                  "presetName": "p1",
                  "transformation": "t.flip()~t.flop()",
                  "params": {
                    "w": {
                      "type": "integer",
                      "default": 200
                    },
                    "h": {
                      "type": "integer",
                      "default": 400
                    }
                  },
                  "archived": false
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "getPresets | Get all presets.",
        "description": "Get all presets of an organization.\n",
        "tags": ["Assets"],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddPresetResponse"
                },
                "example": {
                  "items": [
                    {
                      "presetName": "p1",
                      "transformation": "t.flip()~t.flop()",
                      "params": {
                        "w": {
                          "type": "integer",
                          "default": 200
                        },
                        "h": {
                          "type": "integer",
                          "default": 400
                        }
                      },
                      "archived": true
                    }
                  ],
                  "page": {
                    "type": "number",
                    "size": 1,
                    "current": 1,
                    "hasNext": false
                  }
                }
              }
            }
          }
        }
      }
    },
    "/service/platform/assets/v1.0/presets/{presetName}": {
      "patch": {
        "summary": "updatePreset | Update a preset.",
        "description": "Update a preset of an organization.\n",
        "tags": ["Assets"],
        "parameters": [
          {
            "name": "presetName",
            "in": "path",
            "required": true,
            "description": "Name of the preset to be updated",
            "schema": {
              "type": "string"
            },
            "example": "p1"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePresetRequest"
              },
              "example": {
                "archived": true
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddPresetResponse"
                },
                "example": {
                  "presetName": "p1",
                  "transformation": "t.flip()~t.flop()",
                  "params": {
                    "w": {
                      "type": "integer",
                      "default": 200
                    },
                    "h": {
                      "type": "integer",
                      "default": 400
                    }
                  },
                  "archived": true
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "deletePreset | Delete a preset.",
        "description": "Delete a preset of an organization.\n",
        "tags": ["Assets"],
        "parameters": [
          {
            "name": "presetName",
            "in": "path",
            "required": true,
            "description": "Name of the preset to be deleted",
            "schema": {
              "type": "string"
            },
            "example": "p1"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddPresetResponse"
                },
                "example": {
                  "presetName": "p1",
                  "transformation": "t.flip()~t.flop()",
                  "params": {
                    "w": {
                      "type": "integer",
                      "default": 200
                    },
                    "h": {
                      "type": "integer",
                      "default": 400
                    }
                  },
                  "archived": true
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "getPreset | Get a preset.",
        "description": "Get a preset of an organization.\n",
        "tags": ["Assets"],
        "parameters": [
          {
            "name": "presetName",
            "in": "path",
            "required": true,
            "description": "Name of the preset to be fetched",
            "schema": {
              "type": "string"
            },
            "example": "p1"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddPresetResponse"
                },
                "example": {
                  "presetName": "p1",
                  "transformation": "t.flip()~t.flop()",
                  "params": {
                    "w": {
                      "type": "integer",
                      "default": 200
                    },
                    "h": {
                      "type": "integer",
                      "default": 400
                    }
                  },
                  "archived": true
                }
              }
            }
          }
        }
      }
    },
    "/service/platform/assets/v1.0/playground/default": {
      "get": {
        "summary": "getDefaultAssetForPlayground | Get default asset for playground",
        "description": "Get default asset for playground",
        "tags": ["Assets"],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadResponse"
                },
                "example": {
                  "_id": "dummy-uuid",
                  "name": "asset",
                  "path": "dir",
                  "fileId": "dir/asset",
                  "format": "jpeg",
                  "size": 1000,
                  "access": "private",
                  "isActive": true,
                  "tags": ["tag1", "tag2"],
                  "metadata": {
                    "key": "value"
                  },
                  "url": "https://domain.com/filename.jpeg"
                }
              }
            }
          }
        }
      }
    },
    "/service/platform/assets/v1.0/playground/plugins": {
      "get": {
        "summary": "getModules | Get all transformation modules",
        "description": "Get all transformation modules.\n",
        "tags": ["Assets"],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransformationModulesResponse"
                },
                "example": {
                  "delimiters": {
                    "operationSeparator": "~",
                    "parameterSeparator": ":"
                  },
                  "plugins": {
                    "erase": {
                      "identifier": "erase",
                      "name": "EraseBG",
                      "description": "EraseBG Background Removal Module",
                      "credentials": {
                        "required": false
                      },
                      "operations": [
                        {
                          "params": {
                            "name": "Industry Type",
                            "type": "enum",
                            "enum": ["general", "ecommerce"],
                            "default": "general",
                            "identifier": "i",
                            "title": "Industry type"
                          },
                          "displayName": "Remove background of an image",
                          "method": "bg",
                          "description": "Remove the background of any image"
                        }
                      ],
                      "enabled": true
                    }
                  },
                  "presets": [
                    {
                      "_id": "dummy-id",
                      "createdAt": "2022-02-14T10:06:17.803Z",
                      "updatedAt": "2022-02-14T10:06:17.803Z",
                      "isActive": true,
                      "orgId": "265",
                      "presetName": "compressor",
                      "transformation": "t.compress(q:95)",
                      "archived": false
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/service/platform/assets/v1.0/playground/plugins/{identifier}": {
      "get": {
        "summary": "getModule | Get Transformation Module by module identifier",
        "description": "Get Transformation Module by module identifier\n",
        "tags": ["Assets"],
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "description": "identifier of Transformation Module",
            "example": "t",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransformationModuleResponse"
                },
                "example": {
                  "identifier": "erase",
                  "name": "EraseBG",
                  "description": "EraseBG Background Removal Module",
                  "credentials": {
                    "required": false
                  },
                  "operations": [
                    {
                      "params": {
                        "name": "Industry Type",
                        "type": "enum",
                        "enum": ["general", "ecommerce"],
                        "default": "general",
                        "identifier": "i",
                        "title": "Industry type"
                      },
                      "displayName": "Remove background of an image",
                      "method": "bg",
                      "description": "Remove the background of any image"
                    }
                  ],
                  "enabled": true
                }
              }
            }
          }
        }
      }
    },
    "/service/platform/organization/v1.0/apps/info": {
      "get": {
        "summary": "getAppOrgDetails | Get App Details",
        "description": "Get App and org details",
        "tags": ["Organization"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success. Returns a JSON object as shown below. Refer `AppOrgDetails` for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppOrgDetails"
                },
                "example": {
                  "app": {
                    "_id": 123,
                    "orgId": 12,
                    "name": "Desktop Client App",
                    "permissions": ["read", "read_write"],
                    "active": false,
                    "createdAt": "2021-07-15T07:47:00Z",
                    "updatedAt": "2021-07-15T07:47:00Z"
                  },
                  "org": {
                    "_id": 12,
                    "name": "org_1",
                    "cloudName": "testcloudname",
                    "accountType": "individual",
                    "industry": "Ecommerce",
                    "strength": "1",
                    "active": "false"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        }
      }
    },
    "/service/platform/transformation/context": {
      "get": {
        "description": "Get transformation context",
        "summary": "getTransformationContext | Get transformation context",
        "tags": ["Transformation"],
        "parameters": [
          {
            "name": "url",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "CDN URL with transformation.",
            "example": "/v2/fynd-eg/t.resize()/__playground/playground-default.jpeg"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTransformationContextSuccessResponse"
                },
                "examples": {
                  "GetTransformationContextSuccessResponse": {
                    "$ref": "#/components/examples/GetTransformationContextSuccessResponse"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "folderItem": {
        "type": "object",
        "required": ["_id", "name", "path", "type"],
        "properties": {
          "_id": {
            "type": "string",
            "description": "Id of the folder item"
          },
          "name": {
            "type": "string",
            "description": "Name of the folder item"
          },
          "path": {
            "type": "string",
            "description": "Path of containing folder"
          },
          "type": {
            "type": "string",
            "description": "Type of the item. `file` or `folder`"
          }
        },
        "example": {
          "_id": "dummy-uuid",
          "name": "dir",
          "type": "folder",
          "path": ""
        }
      },
      "exploreItem": {
        "type": "object",
        "required": ["_id", "name", "type", "path"],
        "properties": {
          "_id": {
            "type": "string",
            "format": "uuid",
            "description": "id of the exploreItem"
          },
          "name": {
            "type": "string",
            "description": "name of the item"
          },
          "type": {
            "type": "string",
            "description": "Type of item whether `file` or `folder`"
          },
          "path": {
            "type": "string",
            "description": "Path of containing folder"
          },
          "fileId": {
            "type": "string",
            "description": "Combination of `path` and `name` of file"
          },
          "format": {
            "type": "string",
            "description": "Format of the file"
          },
          "size": {
            "type": "integer",
            "description": "Size of the file in bytes"
          },
          "access": {
            "type": "string",
            "description": "Access level of asset, can be either `public-read` or `private`"
          }
        },
        "example": [
          {
            "_id": "dummy-uuid",
            "name": "dir",
            "path": "",
            "type": "folder"
          },
          {
            "_id": "dummy-uuid",
            "name": "asset1",
            "type": "file",
            "path": "dir",
            "fileId": "dir/asset1",
            "format": "jpeg",
            "size": 1000,
            "access": "private"
          }
        ]
      },
      "page": {
        "type": "object",
        "required": ["type", "size", "current", "hasNext", "itemTotal"],
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of page"
          },
          "size": {
            "type": "integer",
            "description": "Number of items on the page"
          },
          "current": {
            "type": "integer",
            "description": "Current page number."
          },
          "hasNext": {
            "type": "boolean",
            "description": "Whether the next page exists."
          },
          "itemTotal": {
            "type": "integer",
            "description": "Total number of items."
          }
        },
        "example": {
          "type": "number",
          "size": 10,
          "current": 1,
          "hasNext": true,
          "itemTotal": 5
        }
      },
      "exploreResponse": {
        "type": "object",
        "required": ["items", "page"],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/exploreItem"
            },
            "description": "exploreItems in current page"
          },
          "page": {
            "$ref": "#/components/schemas/page",
            "description": "page details"
          }
        },
        "example": {
          "items": [
            {
              "_id": "dummy-uuid",
              "name": "dir",
              "type": "folder"
            },
            {
              "_id": "dummy-uuid",
              "name": "asset2",
              "type": "file",
              "path": "dir",
              "fileId": "dir/asset2",
              "format": "jpeg",
              "size": 1000,
              "access": "private"
            },
            {
              "_id": "dummy-uuid",
              "name": "asset1",
              "type": "file",
              "path": "dir",
              "fileId": "dir/asset1",
              "format": "jpeg",
              "size": 1000,
              "access": "private"
            }
          ],
          "page": {
            "type": "number",
            "size": 4,
            "current": 1,
            "hasNext": false
          }
        }
      },
      "ListFilesResponse": {
        "type": "object",
        "required": ["items", "page"],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/exploreItem"
            },
            "description": "exploreItems in current page"
          },
          "page": {
            "$ref": "#/components/schemas/page",
            "description": "page details"
          }
        },
        "example": {
          "items": [
            {
              "_id": "dummy-uuid",
              "name": "dir",
              "type": "folder"
            },
            {
              "_id": "dummy-uuid",
              "name": "asset2",
              "type": "file",
              "path": "dir",
              "fileId": "dir/asset2",
              "format": "jpeg",
              "size": 1000,
              "access": "private"
            },
            {
              "_id": "dummy-uuid",
              "name": "asset1",
              "type": "file",
              "path": "dir",
              "fileId": "dir/asset1",
              "format": "jpeg",
              "size": 1000,
              "access": "private"
            }
          ],
          "page": {
            "type": "number",
            "size": 4,
            "current": 1,
            "hasNext": false
          }
        }
      },
      "exploreFolderResponse": {
        "type": "object",
        "required": ["folder", "items", "page"],
        "properties": {
          "folder": {
            "$ref": "#/components/schemas/folderItem",
            "description": "requested folder item"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/exploreItem"
            },
            "description": "exploreItems in current page"
          },
          "page": {
            "$ref": "#/components/schemas/page",
            "description": "page details"
          }
        },
        "example": {
          "folder": {
            "_id": "dummy-uuid",
            "name": "dir",
            "path": "",
            "type": "folder"
          },
          "items": [
            {
              "_id": "dummy-uuid",
              "name": "dir1",
              "path": "dir",
              "type": "folder"
            },
            {
              "_id": "dummy-uuid",
              "name": "asset2",
              "type": "file",
              "path": "dir",
              "fileId": "dir/asset2",
              "format": "jpeg",
              "size": 1000,
              "access": "private"
            },
            {
              "_id": "dummy-uuid",
              "name": "asset1",
              "type": "file",
              "path": "dir",
              "fileId": "dir/asset1",
              "format": "jpeg",
              "size": 1000,
              "access": "private"
            }
          ],
          "page": {
            "type": "number",
            "size": 4,
            "current": 1,
            "hasNext": false
          }
        }
      },
      "FileUploadRequest": {
        "type": "object",
        "required": ["file"],
        "properties": {
          "file": {
            "type": "file",
            "format": "binary",
            "description": "Asset file"
          },
          "path": {
            "type": "string",
            "description": "Path where you want to store the asset. Path of containing folder"
          },
          "name": {
            "type": "string",
            "description": "Name of the asset, if not provided name of the file will be used. Note - The provided name will be slugified to make it URL safe"
          },
          "access": {
            "$ref": "#/components/schemas/AccessEnum",
            "description": "Access level of asset, can be either `public-read` or `private`",
            "default": "private"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Asset tags"
          },
          "metadata": {
            "type": "object",
            "description": "Asset related metadata"
          },
          "overwrite": {
            "type": "boolean",
            "default": false,
            "description": "Overwrite flag. If set to `true` will overwrite any file that exists with same path, name and type. Defaults to `false`."
          },
          "filenameOverride": {
            "type": "boolean",
            "default": false,
            "description": "If set to `true` will add unique characters to name if asset with given name already exists. If overwrite flag is set to `true`, preference will be given to overwrite flag. If both are set to `false` an error will be raised."
          }
        }
      },
      "UrlUploadRequest": {
        "type": "object",
        "required": ["url"],
        "properties": {
          "url": {
            "type": "string",
            "format": "url",
            "description": "Asset URL"
          },
          "path": {
            "type": "string",
            "description": "Path where you want to store the asset. Path of containing folder."
          },
          "name": {
            "type": "string",
            "description": "Name of the asset, if not provided name of the file will be used. Note - The provided name will be slugified to make it URL safe"
          },
          "access": {
            "$ref": "#/components/schemas/AccessEnum",
            "description": "Access level of asset, can be either `public-read` or `private`",
            "default": "private"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Asset tags"
          },
          "metadata": {
            "type": "object",
            "description": "Asset related metadata"
          },
          "overwrite": {
            "type": "boolean",
            "default": false,
            "description": "Overwrite flag. If set to `true` will overwrite any file that exists with same path, name and type. Defaults to `false`."
          },
          "filenameOverride": {
            "type": "boolean",
            "default": false,
            "description": "If set to `true` will add unique characters to name if asset with given name already exists. If overwrite flag is set to `true`, preference will be given to overwrite flag. If both are set to `false` an error will be raised."
          }
        }
      },
      "UploadResponse": {
        "type": "object",
        "required": [
          "_id",
          "fileId",
          "name",
          "path",
          "format",
          "size",
          "access"
        ],
        "properties": {
          "_id": {
            "type": "string",
            "format": "uuid",
            "description": "_id of the item"
          },
          "fileId": {
            "type": "string",
            "description": "Combination of `path` and `name` of file"
          },
          "name": {
            "type": "string",
            "description": "name of the item"
          },
          "path": {
            "type": "string",
            "description": "path to the parent folder"
          },
          "format": {
            "type": "string",
            "description": "format of the file"
          },
          "size": {
            "type": "integer",
            "description": "size of file in bytes"
          },
          "access": {
            "type": "string",
            "description": "Access level of asset, can be either public-read or private"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "tags associated with the item"
          },
          "metadata": {
            "type": "object",
            "description": "metadata associated with the item"
          },
          "url": {
            "type": "string",
            "format": "uri",
            "description": "url of the item"
          },
          "thumbnail": {
            "type": "string",
            "format": "uri",
            "description": "url of item thumbnail"
          }
        }
      },
      "SignedUploadRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "name of the file"
          },
          "path": {
            "type": "string",
            "description": "Path of containing folder."
          },
          "format": {
            "type": "string",
            "description": "Format of the file"
          },
          "access": {
            "$ref": "#/components/schemas/AccessEnum",
            "description": "Access level of asset, can be either `public-read` or `private`"
          },
          "tags": {
            "type": "array",
            "description": "Tags associated with the file.",
            "items": {
              "type": "string"
            }
          },
          "metadata": {
            "type": "object",
            "description": "Metadata associated with the file."
          },
          "overwrite": {
            "type": "boolean",
            "default": false,
            "description": "Overwrite flag. If set to `true` will overwrite any file that exists with same path, name and type. Defaults to `false`."
          },
          "filenameOverride": {
            "type": "boolean",
            "default": false,
            "description": "If set to `true` will add unique characters to name if asset with given name already exists. If overwrite flag is set to `true`, preference will be given to overwrite flag. If both are set to `false` an error will be raised."
          }
        }
      },
      "SignedUploadResponse": {
        "type": "object",
        "required": ["s3PresignedUrl"],
        "properties": {
          "s3PresignedUrl": {
            "$ref": "#/components/schemas/PresignedUrl",
            "description": "`signedDetails` for upload with frontend sdk\n"
          }
        }
      },
      "PresignedUrl": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "format": "uri",
            "description": "`presigned url` for upload\n"
          },
          "fields": {
            "type": "object",
            "description": "signed fields to be sent along with request"
          }
        }
      },
      "FilesResponse": {
        "type": "object",
        "required": [
          "_id",
          "name",
          "path",
          "fileId",
          "format",
          "size",
          "access",
          "isActive"
        ],
        "properties": {
          "_id": {
            "type": "string",
            "format": "uuid",
            "description": "_id of the file"
          },
          "name": {
            "type": "string",
            "description": "name of the file"
          },
          "path": {
            "type": "string",
            "description": "path of containing folder."
          },
          "fileId": {
            "type": "string",
            "description": "Combination of `path` and `name` of file"
          },
          "format": {
            "type": "string",
            "description": "format of the file"
          },
          "size": {
            "type": "integer",
            "description": "size of the file in bytes"
          },
          "access": {
            "type": "string",
            "description": "Access level of file, can be either `public-read` or `private`"
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether the file is active"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Tags associated with the file"
          },
          "metadata": {
            "type": "object",
            "description": "Metadata associated with the file"
          },
          "url": {
            "type": "string",
            "format": "uri",
            "description": "url of the file"
          },
          "thumbnail": {
            "type": "string",
            "format": "uri",
            "description": "url of the thumbnail of the file"
          }
        }
      },
      "UpdateFileRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the file"
          },
          "path": {
            "type": "string",
            "description": "path of containing folder."
          },
          "access": {
            "type": "string",
            "description": "Access level of asset, can be either `public-read` or `private`"
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether the file is active"
          },
          "tags": {
            "type": "array",
            "description": "Tags associated with the file",
            "items": {
              "type": "string"
            }
          },
          "metadata": {
            "type": "object",
            "description": "Metadata associated with the file"
          }
        },
        "example": {
          "name": "asset",
          "path": "dir",
          "access": "private",
          "isActive": false,
          "tags": ["tag1", "tag2"],
          "metadata": {
            "key": "value"
          }
        }
      },
      "FoldersResponse": {
        "type": "object",
        "required": ["_id", "name", "path", "isActive"],
        "properties": {
          "_id": {
            "type": "string",
            "format": "uuid",
            "description": "_id of the folder"
          },
          "name": {
            "type": "string",
            "description": "name of the folder"
          },
          "path": {
            "type": "string",
            "description": "path of containing folder."
          },
          "isActive": {
            "type": "boolean",
            "description": "whether the folder is active"
          }
        }
      },
      "CreateFolderRequest": {
        "type": "object",
        "required": ["name"],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the folder"
          },
          "path": {
            "type": "string",
            "description": "path of containing folder."
          }
        },
        "example": {
          "name": "subDir",
          "path": "dir"
        }
      },
      "UpdateFolderRequest": {
        "type": "object",
        "properties": {
          "isActive": {
            "type": "boolean",
            "description": "whether the folder is active"
          }
        }
      },
      "TransformationModulesResponse": {
        "type": "object",
        "properties": {
          "delimiters": {
            "$ref": "#/components/schemas/Delimiter",
            "description": "Delimiter for parsing plugin schema"
          },
          "plugins": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/TransformationModuleResponse"
            },
            "description": "Transformations currently supported by the pixelbin"
          },
          "presets": {
            "type": "array",
            "description": "List of saved presets"
          }
        }
      },
      "DeleteMultipleFilesRequest": {
        "type": "object",
        "required": ["ids"],
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of file _ids to delete"
          }
        }
      },
      "Delimiter": {
        "type": "object",
        "properties": {
          "operationSeparator": {
            "type": "string",
            "description": "separator to separate operations in the url pattern"
          },
          "parameterSeparator": {
            "type": "string",
            "description": "separator to separate parameters used with operations in the url pattern"
          }
        }
      },
      "TransformationModuleResponse": {
        "type": "object",
        "properties": {
          "identifier": {
            "type": "string",
            "description": "identifier for the plugin type"
          },
          "name": {
            "type": "string",
            "description": "name of the plugin"
          },
          "description": {
            "type": "string",
            "description": "description of the plugin"
          },
          "credentials": {
            "type": "object",
            "description": "credentials, if any, associated with the plugin"
          },
          "operations": {
            "type": "array",
            "description": "supported operations in the plugin"
          },
          "enabled": {
            "type": "boolean",
            "description": "whether the plugin is enabled"
          }
        }
      },
      "AccessEnum": {
        "type": "string",
        "enum": ["public-read", "private"]
      },
      "Credentials": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Unique ID for credential"
          },
          "createdAt": {
            "type": "string",
            "description": "Credential creation ISO timestamp"
          },
          "updatedAt": {
            "type": "string",
            "description": "Credential update ISO timestamp"
          },
          "isActive": {
            "type": "boolean",
            "description": "Tells if credential is active or not"
          },
          "orgId": {
            "type": "string",
            "description": "ID of the organization this credential belongs to"
          },
          "pluginId": {
            "type": "string",
            "description": "Unique identifier for the plugin this credential belongs to"
          },
          "credentials": {
            "type": "object",
            "description": "Credentials object. It is different for each plugin"
          },
          "description": "All credentials of organization"
        }
      },
      "CredentialsItem": {
        "type": "object",
        "properties": {
          "pluginId": {
            "schema": {
              "$ref": "#/components/schemas/Credentials"
            }
          }
        }
      },
      "AddCredentialsRequest": {
        "type": "object",
        "required": ["pluginId", "credentials"],
        "properties": {
          "credentials": {
            "type": "object",
            "description": "Credentials of the plugin"
          },
          "pluginId": {
            "type": "string",
            "description": "Unique identifier for the plugin this credential belongs to"
          }
        }
      },
      "UpdateCredentialsRequest": {
        "type": "object",
        "required": ["credentials"],
        "properties": {
          "credentials": {
            "type": "object",
            "description": "Credentials of the plugin"
          }
        }
      },
      "AddCredentialsResponse": {
        "type": "object",
        "required": ["_id", "createdAt", "updatedAt", "pluginId", "orgId"],
        "properties": {
          "credentials": {
            "type": "object",
            "schema": {
              "$ref": "#/components/schemas/Credentials"
            }
          }
        }
      },
      "DeleteCredentialsResponse": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Unique Credential ID"
          },
          "createdAt": {
            "type": "string",
            "description": "Credential creation ISO timestamp"
          },
          "updatedAt": {
            "type": "string",
            "description": "Credential update ISO timestamp"
          },
          "isActive": {
            "type": "boolean",
            "description": "Tells if credential is active or not"
          },
          "orgId": {
            "type": "string",
            "description": "ID of the organization this credential belongs to"
          },
          "pluginId": {
            "type": "string",
            "description": "Unique identifier for the plugin this credential belongs to"
          },
          "credentials": {
            "type": "object",
            "description": "Credentials object. It is different for each plugin"
          }
        }
      },
      "GetAncestorsResponse": {
        "type": "object",
        "properties": {
          "folder": {
            "$ref": "#/components/schemas/folderItem"
          },
          "ancestors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FoldersResponse"
            }
          }
        }
      },
      "GetFilesWithConstraintsItem": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "GetFilesWithConstraintsRequest": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetFilesWithConstraintsItem"
            }
          },
          "maxCount": {
            "type": "number"
          },
          "maxSize": {
            "type": "number"
          }
        }
      },
      "AddPresetRequest": {
        "type": "object",
        "required": ["presetName", "transformation"],
        "properties": {
          "presetName": {
            "type": "string",
            "description": "Name of the preset"
          },
          "transformation": {
            "type": "string",
            "description": "A chain of transformations, separated by `~`"
          },
          "params": {
            "type": "object",
            "description": "Parameters object for transformation variables"
          }
        }
      },
      "AddPresetResponse": {
        "type": "object",
        "required": ["presetName", "transformation"],
        "properties": {
          "presetName": {
            "type": "string",
            "description": "Name of the preset"
          },
          "transformation": {
            "type": "string",
            "description": "A chain of transformations, separated by `~`"
          },
          "params": {
            "type": "object",
            "description": "Parameters object for transformation variables"
          },
          "archived": {
            "type": "boolean",
            "description": "Indicates if the preset has been archived"
          }
        }
      },
      "UpdatePresetRequest": {
        "type": "object",
        "required": ["archived"],
        "properties": {
          "archived": {
            "type": "boolean",
            "description": "Indicates if the preset has been archived"
          }
        }
      },
      "GetPresetsResponse": {
        "type": "object",
        "required": ["items", "page"],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AddPresetResponse"
            },
            "description": "Presets in current page"
          },
          "page": {
            "$ref": "#/components/schemas/page",
            "description": "page details"
          }
        }
      },
      "OrganizationDetailSchema": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "integer",
            "description": "Id of the organization"
          },
          "name": {
            "type": "string",
            "description": "Organization Name"
          },
          "cloudName": {
            "type": "string",
            "description": "Unique cloud name associated with the organization"
          },
          "ownerId": {
            "type": "string",
            "description": "User Id of the organization owner"
          },
          "active": {
            "type": "boolean",
            "description": "Whether the organization is active"
          },
          "createdAt": {
            "type": "string",
            "description": "Timestamp when the organization was created"
          },
          "updatedAt": {
            "type": "string",
            "description": "Timestamp when the organization was last updated"
          }
        }
      },
      "AppSchema": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "integer",
            "description": "App id"
          },
          "orgId": {
            "type": "integer",
            "description": "Organization id the app belongs to"
          },
          "name": {
            "type": "string",
            "description": "Name of the app"
          },
          "token": {
            "type": "string",
            "description": "api token for the app"
          },
          "permissions": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": ["read", "read_write", "transform"]
            },
            "description": "Permissions applied on the app"
          },
          "active": {
            "type": "boolean",
            "description": "Whether the app is active"
          },
          "createdAt": {
            "type": "string",
            "description": "Timestamp when the app was created"
          },
          "updatedAt": {
            "type": "string",
            "description": "Timestamp when the app was last updated"
          }
        }
      },
      "AppOrgDetails": {
        "type": "object",
        "properties": {
          "app": {
            "$ref": "#/components/schemas/AppSchema"
          },
          "org": {
            "$ref": "#/components/schemas/OrganizationDetailSchema"
          }
        }
      },
      "ErrorSchema": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        }
      },
      "GetTransformationContextSuccessResponse": {
        "type": "object",
        "properties": {
          "context": {
            "type": "object",
            "headers": {
              "type": "object",
              "description": "Response headers for the context data"
            },
            "metadata": {
              "type": "object",
              "description": "Metadata for the transformed image"
            },
            "params": {
              "type": "object",
              "description": "Parameters of the applied transformations"
            },
            "steps": {
              "type": "array",
              "items": {
                "type": "object",
                "description": "Applied transformation"
              },
              "description": "Applied transformations list"
            }
          }
        }
      }
    },
    "responses": {
      "BadRequest": {
        "description": "Bad Request Error. See the error object in the response body to know the exact reason.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorSchema"
            }
          }
        }
      },
      "OrganizationNotFound": {
        "description": "Bad Request Error. See the error object in the response body to know the exact reason.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorSchema"
            }
          }
        }
      },
      "InternalServerError": {
        "description": "Internal Server Error. See the error object in the response body to know the exact reason.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/InternalServerErrorSchema"
            }
          }
        }
      }
    },
    "examples": {
      "UpdateFolderRequestExample": {
        "isActive": false
      },
      "FileResponseExample": {
        "_id": "dummy-uuid",
        "name": "asset",
        "path": "dir",
        "fileId": "dir/asset",
        "format": "jpeg",
        "size": 1000,
        "access": "private",
        "isActive": true,
        "tags": ["tag1", "tag2"],
        "metadata": {
          "key": "value"
        },
        "url": "https://domain.com/filename.jpeg"
      },
      "UpdateFileRequestExample": {
        "name": "asset",
        "path": "dir",
        "access": "private",
        "isActive": false,
        "tags": ["tag1", "tag2"],
        "metadata": {
          "key": "value"
        }
      },
      "FolderResponseExample": {
        "_id": "dummy-uuid",
        "name": "subDir",
        "path": "dir",
        "isActive": true
      },
      "FolderRequestExample": {
        "fileId": "path/to/folder/name",
        "isActive": true
      },
      "FolderListResponseExample": [
        {
          "_id": "dummy-uuid",
          "name": "subDir",
          "path": "dir",
          "isActive": true
        },
        {
          "_id": "dummy-uuid-2",
          "name": "subDir",
          "path": "dir",
          "isActive": true
        }
      ],
      "ExploreFolderResponseExample": {
        "folder": {
          "_id": "dummy-uuid",
          "name": "dir",
          "path": "",
          "type": "folder"
        },
        "items": [
          {
            "_id": "dummy-uuid",
            "name": "dir1",
            "path": "dir",
            "type": "folder"
          },
          {
            "_id": "dummy-uuid",
            "name": "asset2",
            "type": "file",
            "path": "dir",
            "fileId": "dir/asset2",
            "format": "jpeg",
            "size": 1000,
            "access": "private"
          },
          {
            "_id": "dummy-uuid",
            "name": "asset1",
            "type": "file",
            "path": "dir",
            "fileId": "dir/asset1",
            "format": "jpeg",
            "size": 1000,
            "access": "private"
          }
        ],
        "page": {
          "type": "number",
          "size": 4,
          "current": 1,
          "hasNext": false
        }
      },
      "ExploreResponseExample": {
        "items": [
          {
            "_id": "dummy-uuid",
            "name": "dir",
            "type": "folder"
          },
          {
            "_id": "dummy-uuid",
            "name": "asset2",
            "type": "file",
            "path": "dir",
            "fileId": "dir/asset2",
            "format": "jpeg",
            "size": 1000,
            "access": "private"
          },
          {
            "_id": "dummy-uuid",
            "name": "asset1",
            "type": "file",
            "path": "dir",
            "fileId": "dir/asset1",
            "format": "jpeg",
            "size": 1000,
            "access": "private"
          }
        ],
        "page": {
          "type": "number",
          "size": 4,
          "current": 1,
          "hasNext": false
        }
      },
      "ListFilesResponseExample": {
        "items": [
          {
            "_id": "dummy-uuid",
            "name": "dir",
            "type": "folder"
          },
          {
            "_id": "dummy-uuid",
            "name": "asset2",
            "type": "file",
            "path": "dir",
            "fileId": "dir/asset2",
            "format": "jpeg",
            "size": 1000,
            "access": "private"
          },
          {
            "_id": "dummy-uuid",
            "name": "asset1",
            "type": "file",
            "path": "dir",
            "fileId": "dir/asset1",
            "format": "jpeg",
            "size": 1000,
            "access": "private"
          }
        ],
        "page": {
          "type": "number",
          "size": 4,
          "current": 1,
          "hasNext": false
        }
      },
      "TransformationModulesResponseExample": {
        "delimiters": {
          "operationSeparator": "~",
          "parameterSeparator": ":"
        },
        "plugins": {
          "erase": {
            "identifier": "erase",
            "name": "EraseBG",
            "description": "EraseBG Background Removal Module",
            "credentials": {
              "required": false
            },
            "operations": [
              {
                "params": {
                  "name": "Industry Type",
                  "type": "enum",
                  "enum": ["general", "ecommerce"],
                  "default": "general",
                  "identifier": "i",
                  "title": "Industry type"
                },
                "displayName": "Remove background of an image",
                "method": "bg",
                "description": "Remove the background of any image"
              }
            ],
            "enabled": true
          }
        },
        "presets": [
          {
            "_id": "dummy-id",
            "createdAt": "2022-02-14T10:06:17.803Z",
            "updatedAt": "2022-02-14T10:06:17.803Z",
            "isActive": true,
            "orgId": "265",
            "presetName": "compressor",
            "transformation": "t.compress(q:95)",
            "archived": false
          }
        ]
      },
      "TransformationModuleResponseExample": {
        "identifier": "erase",
        "name": "EraseBG",
        "description": "EraseBG Background Removal Module",
        "credentials": {
          "required": false
        },
        "operations": [
          {
            "params": {
              "name": "Industry Type",
              "type": "enum",
              "enum": ["general", "ecommerce"],
              "default": "general",
              "identifier": "i",
              "title": "Industry type"
            },
            "displayName": "Remove background of an image",
            "method": "bg",
            "description": "Remove the background of any image"
          }
        ],
        "enabled": true
      },
      "UploadResponseExample": {
        "_id": "dummy-uuid",
        "name": "asset",
        "path": "dir",
        "fileId": "dir/asset",
        "format": "jpeg",
        "size": 1000,
        "access": "private",
        "isActive": true,
        "tags": ["tag1", "tag2"],
        "metadata": {
          "key": "value"
        },
        "url": "https://domain.com/filename.jpeg"
      },
      "SignedUrlExample": {
        "s3PresignedUrl": {
          "url": "https://domain.com/xyz",
          "fields": {
            "field1": "value",
            "field2": "value"
          }
        }
      },
      "DeleteMultipleFilesRequestExample": {
        "ids": ["_id_1", "_id_2", "_id_3"]
      },
      "CreateFolderRequestExample": {
        "name": "subDir",
        "path": "dir"
      },
      "FileUploadRequestExample": {
        "file": "fileReadStream",
        "path": "path/to/containing/folder",
        "name": "filename",
        "access": "public-read",
        "tags": ["tag1", "tag2"],
        "metadata": {},
        "overwrite": false,
        "filenameOverride": true
      },
      "urlUploadRequestExample": {
        "url": "www.dummy.com/image.png",
        "path": "path/to/containing/folder",
        "name": "filename",
        "access": "public-read",
        "tags": ["tag1", "tag2"],
        "metadata": {},
        "overwrite": false,
        "filenameOverride": true
      },
      "signedUrlUploadRequestExample": {
        "path": "path/to/containing/folder",
        "name": "filename",
        "format": "jpeg",
        "access": "public-read",
        "tags": ["tag1", "tag2"],
        "metadata": {},
        "overwrite": false,
        "filenameOverride": true
      },
      "ExploreItemExample": [
        {
          "_id": "dummy-uuid",
          "createdAt": "2022-10-05T10:43:04.117Z",
          "updatedAt": "2022-10-05T10:43:04.117Z",
          "name": "asset2",
          "type": "file",
          "path": "dir",
          "fileId": "dir/asset2",
          "format": "jpeg",
          "size": 1000,
          "access": "private",
          "metadata": {},
          "height": 100,
          "width": 100
        }
      ],
      "AppOrgDetailsExample": {
        "app": {
          "_id": 123,
          "orgId": 12,
          "name": "Desktop Client App",
          "permissions": ["read", "read_write"],
          "active": false,
          "createdAt": "2021-07-15T07:47:00Z",
          "updatedAt": "2021-07-15T07:47:00Z"
        },
        "org": {
          "_id": 12,
          "name": "org_1",
          "cloudName": "testcloudname",
          "accountType": "individual",
          "industry": "Ecommerce",
          "strength": "1",
          "active": "false"
        }
      },
      "GetTransformationContextSuccessResponse": {
        "value": {
          "context": {
            "steps": [
              {
                "name": "blur",
                "operation": "Basic",
                "identifier": "t",
                "data": {},
                "metadata": null,
                "format": "jpeg",
                "size": 58650,
                "width": 1140,
                "height": 760,
                "space": "srgb",
                "channels": 3,
                "depth": "uchar",
                "density": 72,
                "chromaSubsampling": "4:2:0",
                "isProgressive": false,
                "resolutionUnit": "inch",
                "hasProfile": false,
                "hasAlpha": false,
                "orientation": 1
              }
            ],
            "metadata": {
              "width": 1140,
              "height": 760,
              "channels": 3,
              "extension": "jpeg",
              "format": "jpeg",
              "contentType": "image/jpeg",
              "size": 62667,
              "assetType": "image",
              "isImageAsset": true,
              "isAudioAsset": false,
              "isVideoAsset": false,
              "isRawAsset": false
            },
            "headers": {
              "host": "api.pixelbin.io",
              "x-real-ip": "0.0.0.0",
              "origin": "https://console.pixelbin.io",
              "accept": "application/json, text/plain, */*",
              "accept-encoding": "gzip, deflate, br",
              "accept-language": "en-US,en;q=0.9"
            },
            "params": {}
          }
        }
      }
    },
    "securitySchemes": {
      "ApiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "API-TOKEN"
      }
    }
  },
  "security": [
    {
      "ApiKeyAuth": []
    }
  ],
  "servers": [
    {
      "url": "https://api.pixelbin.io"
    }
  ]
}
